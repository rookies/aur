---
 pdfposter.rst                  |    4 ++++
 pdftools/pdfposter/__init__.py |   13 ++++++++-----
 pdftools/pdfposter/cmd.py      |    2 ++
 3 files changed, 14 insertions(+), 5 deletions(-)

Index: pdftools.pdfposter-0.6.0dev/pdftools/pdfposter/__init__.py
===================================================================
--- pdftools.pdfposter-0.6.0dev.orig/pdftools/pdfposter/__init__.py
+++ pdftools.pdfposter-0.6.0dev/pdftools/pdfposter/__init__.py
@@ -245,7 +245,7 @@ def _scale_pdf_page(page, factor):
     page[NameObject('/Contents')] = content
 
 
-def posterize(outpdf, page, mediabox, posterbox, scale):
+def posterize(outpdf, page, mediabox, posterbox, scale, trimpage=False):
     """
     page: input page
     mediabox : size secs of the media to print on
@@ -279,9 +279,12 @@ def posterize(outpdf, page, mediabox, po
             newpage.mediaBox = RectangleObject((h_pos, v_pos,
                                                 h_pos + h_step,
                                                 v_pos + v_step))
-            newpage.trimBox = RectangleObject((h_pos, v_pos,
-                                               min(h_max, h_pos + h_step),
-                                               min(v_max, v_pos + v_step)))
+            if trimpage:
+                newpage.trimBox = RectangleObject((h_pos, v_pos,
+                                                 min(h_max, h_pos + h_step),
+                                                 min(v_max, v_pos + v_step)))
+            else:
+                newpage.trimBox = newpage.mediaBox
             newpage.cropBox = newpage.artBox = newpage.trimBox
             outpdf.addPage(newpage)
             v_pos += v_step
@@ -313,6 +316,6 @@ def main(opts, infilename, outfilename,
 
     for i, page in enumerate(inpdf.pages):
         log(19, '---- processing page %i -----', i+1)
-        posterize(outpdf, page, opts.media_size, opts.poster_size, opts.scale)
+        posterize(outpdf, page, opts.media_size, opts.poster_size, opts.scale, opts.trimpage)
     if not opts.dry_run:
         outpdf.write(open(outfilename, 'wb'))
Index: pdftools.pdfposter-0.6.0dev/pdftools/pdfposter/cmd.py
===================================================================
--- pdftools.pdfposter-0.6.0dev.orig/pdftools/pdfposter/cmd.py
+++ pdftools.pdfposter-0.6.0dev/pdftools/pdfposter/cmd.py
@@ -81,6 +81,8 @@ def run():
                       help='Be verbose. Tell about scaling, rotation and number of pages. Can be used more than once to increase the verbosity. ')
     parser.add_option('-n', '--dry-run', action='store_true',
                       help='Show what would have been done, but do not generate files.')
+    parser.add_option('-t', '--trimpage', action='store_true',
+                      help='Save the minimal bounding box with each page. Default: entire pages.')
     
     group = parser.add_option_group('Define Target')
     group.add_option('-m', '--media-size',
Index: pdftools.pdfposter-0.6.0dev/pdfposter.rst
===================================================================
--- pdftools.pdfposter-0.6.0dev.orig/pdfposter.rst
+++ pdftools.pdfposter-0.6.0dev/pdfposter.rst
@@ -67,6 +67,10 @@ General Options
                       pages. Can be used more than once to increase the
                       verbosity.
 -n, --dry-run     Show what would have been done, but do not generate files.
+-t, --trimpage	Save the minimal bounding box with each page. This option is
+                only optional in version 0.6.0dev.jw; older versions always 
+                trim their output pages.  With -t, printers may center the
+                pages (giving unpredictable margins).
 
 Defining Output
 -----------------
